{"version":3,"file":"component---src-pages-mdx-frontmatter-variant-mdx-frontmatter-slug-tsx-content-file-path-home-runner-work-solubeda-solubeda-content-artwork-dante-gaiman-readme-mdx-76886caee0f13085be17.js","mappings":"+MAGA,SAASA,EAAkBC,GACzB,OAAOC,EAAAA,cAAoBA,EAAAA,SAC7B,CAKA,MAJA,SAAoBD,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOE,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOJ,EAAYF,EAAAA,cAAoBE,EAAWH,EAAOC,EAAAA,cAAoBF,EAAmBC,IAAUD,GAC5G,E,UCNO,MAAMS,EAAcC,IACzB,IAAI,KAACC,GAAQD,EACb,MAAM,YAACE,EAAW,KAAEC,GAAQF,EAAKG,IAC3BC,EAAUH,EAAYG,QAC5B,MAAmB,aAAZA,EAAyBb,EAAAA,cAAoBc,EAAAA,GAAa,CAC/DJ,YAAaA,EACbC,KAAMA,IACS,gBAAZE,EAA4Bb,EAAAA,cAAoBe,EAAAA,GAAgB,CACnEL,YAAaA,EACbC,KAAMA,IACS,UAAZE,EAAsBb,EAAAA,cAAoBgB,EAAAA,EAAW,CACxDN,YAAaA,EACbC,KAAMA,IACH,IAAI,EAGI,SAASM,EAAiBlB,GACvC,OAAOC,EAAAA,cAAoBO,EAAaR,EAAOC,EAAAA,cAAoBkB,EAAqBnB,GAC1F,C,+HCXA,MAAMoB,EAAY,CAChBC,MAAOC,EAAAA,GACPC,MAAOC,EAAAA,GACPC,KAAMC,EAAAA,GACNC,IAAKC,EAAAA,IAkBMb,EAA0CN,IAGhD,IAHiD,YACtDE,EAAW,KACXC,GACDH,EACC,MAAMoB,EAAMT,EAAUT,EAAYmB,QAKlC,OAJKD,GACHE,QAAQC,MAAM,wDAId/B,EAAAA,cAAAA,EAAAA,SAAA,KACG4B,GACC5B,EAAAA,cAAC4B,EAAG,CACFnB,KAAM,CAAEC,cAAaC,QACrBqB,OAAQtB,EAAYsB,OACpBC,WAAW,MAGd,EC7CDd,EAAY,CAChBe,UAAWC,EAAAA,GACXC,MAAOC,EAAAA,IA0BItB,EAAgDP,IAGtD,IAHuD,YAC5DE,EAAW,KACXC,GACDH,EACC,MAAMoB,EAAMT,EAAUT,EAAYmB,QAKlC,OAJKD,GACHE,QAAQC,MAAM,uDAId/B,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACsC,EAAAA,GAAG,CAACC,MAAO7B,EAAY6B,QACvBX,GACC5B,EAAAA,cAAC4B,EAAG,CACFnB,KAAM,CAAEC,cAAaC,QACrBqB,OAAQtB,EAAYsB,OACpBC,WAAW,iBAGd,EC/BMjB,EAAsCR,IAAA,IAAC,YAAEE,EAAW,KAAEC,GAAMH,EAAA,OACvER,EAAAA,cAACwC,EAAAA,GAAM,KACLxC,EAAAA,cAACyC,EAAAA,GAAO,KACNzC,EAAAA,cAAA,UAAKU,EAAY6B,OACjBvC,EAAAA,cAAA,SAAG,gBAAcU,EAAYgC,MAC7B1C,EAAAA,cAAA,OACE2C,IAAKjC,EAAYkC,SAASC,gBAAgBC,SAASH,IACnDI,IAAKrC,EAAY6B,MACjBS,MAAO,CAAEC,SAAU,UAEpBtC,GAEI,C,sECAJ,MAAMuC,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiB7C,GAC/B,MAAM8C,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAf5C,EACFA,EAAW8C,GAGb,IAAIA,KAAsB9C,IAChC,CAAC8C,EAAmB9C,GACzB,C","sources":["webpack://solubeda/./content/artwork/dante-gaiman/README.mdx","webpack://solubeda/./src/pages/{mdx.frontmatter__variant}/{mdx.frontmatter__slug}.tsx","webpack://solubeda/./src/views/ArtworkView.tsx","webpack://solubeda/./src/views/ExhibitionsView.tsx","webpack://solubeda/./src/views/PressView.tsx","webpack://solubeda/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  return React.createElement(React.Fragment);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/solubeda/solubeda/content/artwork/dante-gaiman/README.mdx\";\nimport * as React from 'react';\nimport {ArtworkView, ExhibitionView, PressView} from '../../views';\nexport const VariantPage = _ref => {\n  let {data} = _ref;\n  const {frontmatter, body} = data.mdx;\n  const variant = frontmatter.variant;\n  return variant === 'artworks' ? React.createElement(ArtworkView, {\n    frontmatter: frontmatter,\n    body: body\n  }) : variant === 'exhibitions' ? React.createElement(ExhibitionView, {\n    frontmatter: frontmatter,\n    body: body\n  }) : variant === 'press' ? React.createElement(PressView, {\n    frontmatter: frontmatter,\n    body: body\n  }) : null;\n};\nVariantPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(VariantPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst query = \"501905978\";\n","import * as React from 'react';\nimport type { IGatsbyImageData } from 'gatsby-plugin-image';\n\nimport {\n  FormatCarousel,\n  FormatVideo,\n  FormatCube,\n  FormatCam,\n} from '../components';\n\nconst formatMap = {\n  serie: FormatCarousel,\n  video: FormatVideo,\n  cube: FormatCube,\n  cam: FormatCam,\n};\n\nexport type ArtworkFrontmatter = {\n  format: 'serie' | 'video' | 'cube' | 'cam';\n  images: { image: IGatsbyImageData; title: string }[];\n  title: string;\n  technic: string;\n  dimensions: string;\n  year: string;\n  video: string;\n};\n\ntype ArtworkViewProps = {\n  frontmatter: ArtworkFrontmatter;\n  body: string;\n};\n\nexport const ArtworkView: React.FC<ArtworkViewProps> = ({\n  frontmatter,\n  body,\n}) => {\n  const Cmp = formatMap[frontmatter.format];\n  if (!Cmp) {\n    console.error('Undefined format or unknown format for this artwork.');\n  }\n\n  return (\n    <>\n      {Cmp && (\n        <Cmp\n          data={{ frontmatter, body }}\n          images={frontmatter.images}\n          returnPage=\"/\"\n        />\n      )}\n    </>\n  );\n};\n","import * as React from 'react';\n\nimport { FormatSlideshow, FormatPlace, SEO } from '../components';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\n\nconst formatMap = {\n  slideshow: FormatSlideshow,\n  place: FormatPlace,\n};\n\nexport type ExhibitionFrontmatter = {\n  format: 'slideshow' | 'place';\n  title: string;\n  technic: string;\n  dimensions: string;\n  year: string;\n  video: string;\n  slideshowTime: number;\n  images: { image: IGatsbyImageData }[];\n  location: {\n    title: string;\n    subtitle: string;\n    map: string;\n    address: string;\n    web: string;\n  };\n};\n\ntype ExhibitionViewProps = {\n  frontmatter: ExhibitionFrontmatter;\n  body: string;\n};\n\nexport const ExhibitionView: React.FC<ExhibitionViewProps> = ({\n  frontmatter,\n  body,\n}) => {\n  const Cmp = formatMap[frontmatter.format];\n  if (!Cmp) {\n    console.error('Undefined format o unknown format for this artwork.');\n  }\n\n  return (\n    <>\n      <SEO title={frontmatter.title} />\n      {Cmp && (\n        <Cmp\n          data={{ frontmatter, body }}\n          images={frontmatter.images}\n          returnPage=\"/exhibitions\"\n        />\n      )}\n    </>\n  );\n};\n","import * as React from 'react';\n\nimport { Article, Layout } from '../components';\n\nexport type PressFrontmatter = {\n  title: string;\n  date: string;\n  featured: {\n    childImageSharp: {\n      original: {\n        src: string;\n      };\n    };\n  };\n};\n\ntype PressViewProps = {\n  frontmatter: PressFrontmatter;\n  body: string;\n};\n\nexport const PressView: React.FC<PressViewProps> = ({ frontmatter, body }) => (\n  <Layout>\n    <Article>\n      <h2>{frontmatter.title}</h2>\n      <p>Publicado el {frontmatter.date}</p>\n      <img\n        src={frontmatter.featured.childImageSharp.original.src}\n        alt={frontmatter.title}\n        style={{ maxWidth: '100%' }}\n      />\n      {body}\n    </Article>\n  </Layout>\n);\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","React","wrapper","MDXLayout","Object","assign","_provideComponents","components","VariantPage","_ref","data","frontmatter","body","mdx","variant","ArtworkView","ExhibitionView","PressView","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","formatMap","serie","FormatCarousel","video","FormatVideo","cube","FormatCube","cam","FormatCam","Cmp","format","console","error","images","returnPage","slideshow","FormatSlideshow","place","FormatPlace","SEO","title","Layout","Article","date","src","featured","childImageSharp","original","alt","style","maxWidth","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}